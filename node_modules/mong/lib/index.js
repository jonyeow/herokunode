var util = require('util');
var MongoClient = require('mongodb').MongoClient;
var mongodb = require('mongodb');
var ObjectID = mongodb.ObjectID;
var QueryStream = require('./stream');

module.exports = exports;

exports.Types = {
  ObjectID: ObjectID
};

var config = {
  db: null
};

function exports (o) {
  o = o || {};
  if (typeof o._id === 'string') {
    this._id = new ObjectID(o._id);
  } else if (typeof o._id === 'object') {
    this._id = o._id;
  }

  this._id = this._id || new ObjectID();
  
  for(var i in o) {
    if (i !== '_id' && Object.hasOwnProperty.call(o, i)) {
      this[i] = o[i];
    }
  }
}

var _whenReady = [];
function whenReady(fn) {
  _whenReady.push(fn);
}
exports.connect = function (uri, done) {
  var options = {
    db: {
      native_parser: true
    }
  };

  MongoClient.connect(uri, options, function (err, db) {
    if (err) return done(err);
    config.db = db;
    _whenReady.forEach(function (fn) {
      fn(db);
    });
    done();
  });
};


exports.find = function () {
  var collection = GC(this);
  var cursor = collection.find.apply(collection, arguments);
  return new QueryStream(cursor, this.prototype);
};

function GC(constructor) {
  return constructor._collection || config.db.collection(constructor.collection);
}

exports.findOne = function () {
  var prototype = this.prototype;
  var cb = arguments[arguments.length - 1];
  arguments[arguments.length - 1] = function (err, internal) {
    if (internal) internal.__proto__ = prototype;
    cb(err, internal);
  };
  var collection = GC(this);
  return collection.findOne.apply(collection, arguments);
};

exports.findById = function (_id, callback) {
  return this.findOne({_id: new ObjectID(_id)}, callback);
};

exports.findAndModify = function (query, sort, update, options, callback) {
  var collection = GC(this);
  return collection.findAndModify.apply(collection, arguments);
};

exports.ensureIndex = function (index) {
  var self = this;
  whenReady(function (db) {
    var collection = GC(self);
    collection.ensureIndex(index, function (err) {
      if (err) throw err;
    });
  });
};

exports.init = function (target, collection) {
  util.inherits(target, exports);
  target.collection = collection;
  Object.keys(exports)
  .forEach(function (key) {
    if (key === 'init') return;
    target[key] = exports[key];
  });
};


exports.prototype.save = function (done) {
  done = done || function (err) {
    if (err) throw err;
  };
  var collection = GC(this.constructor);
  var self = this;
  collection.save(this, function (err, numAffected, details) {
    if (err) return done(err);
    done(null, self);
  });
};

exports.update = function (query, update, options, callback) {
  var collection = GC(this);
  return collection.update.apply(collection, arguments);
};

exports.prototype.update = function (update, options, callback) {
  var collection = GC(this.constructor);
  var args = [{_id: this._id}].concat(arguments);
  return collection.update.apply(collection, args);
};

exports.prototype.updateIf = function (query, options, callback) {
  query = Object.create(query);
  query._id = this._id;
  return exports.update.apply(this.constructor, arguments);
};
